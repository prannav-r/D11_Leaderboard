from supabase import create_client, Client
from datetime import datetime
from typing import Dict, List, Tuple, Optional
import logging
from config import Config

# Set up logging
logging.basicConfig(
    level=getattr(logging, Config.LOG_LEVEL),
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class DatabaseError(Exception):
    """Custom exception for database errors"""
    pass

# Initialize Supabase client
supabase: Client = create_client(
    Config.SUPABASE_URL,
    Config.SUPABASE_KEY
)

def init_db() -> None:
    """Initialize database with required tables"""
    try:
        # Create points table
        supabase.table('points').create({
            'username': 'text primary key',
            'points': 'integer default 0 check (points >= 0)'
        }).execute()
        
        # Create history table
        supabase.table('history').create({
            'id': 'bigint generated by default as identity primary key',
            'username': 'text not null',
            'points_change': 'integer not null',
            'timestamp': 'timestamp with time zone default timezone(\'utc\'::text, now()) not null',
            'match_number': 'integer references match_results(match_number)',
            'recorded_by': 'text not null'
        }).execute()
        
        # Create match_results table
        supabase.table('match_results').create({
            'match_number': 'integer primary key',
            'winner': 'text not null',
            'timestamp': 'timestamp with time zone default timezone(\'utc\'::text, now()) not null',
            'recorded_by': 'text not null'
        }).execute()
        
        # Create indexes
        supabase.rpc('create_index', {
            'table_name': 'history',
            'index_name': 'idx_history_username',
            'column_name': 'username'
        }).execute()
        
        supabase.rpc('create_index', {
            'table_name': 'history',
            'index_name': 'idx_history_timestamp',
            'column_name': 'timestamp'
        }).execute()
        
        supabase.rpc('create_index', {
            'table_name': 'history',
            'index_name': 'idx_history_match',
            'column_name': 'match_number'
        }).execute()
        
        supabase.rpc('create_index', {
            'table_name': 'match_results',
            'index_name': 'idx_match_results_timestamp',
            'column_name': 'timestamp'
        }).execute()
        
        logger.info("Database initialized successfully")
    except Exception as e:
        logger.error(f"Error initializing database: {str(e)}")
        raise DatabaseError(f"Failed to initialize database: {str(e)}")

def get_points() -> Dict[str, int]:
    """Get all user points"""
    try:
        response = supabase.table('points').select('username, points').execute()
        return {row['username']: row['points'] for row in response.data}
    except Exception as e:
        logger.error(f"Error getting points: {str(e)}")
        raise DatabaseError(f"Failed to get points: {str(e)}")

def update_points(username: str, points_change: int, match_number: Optional[int] = None, recorded_by: str = 'System') -> None:
    """Update points for a user"""
    try:
        # Start transaction
        supabase.rpc('begin_transaction').execute()
        
        try:
            # Update points
            supabase.table('points').upsert({
                'username': username,
                'points': points_change
            }).execute()
            
            # Record history
            supabase.table('history').insert({
                'username': username,
                'points_change': points_change,
                'timestamp': datetime.now().isoformat(),
                'match_number': match_number,
                'recorded_by': recorded_by
            }).execute()
            
            # If this is a match win, record it
            if match_number is not None:
                supabase.table('match_results').insert({
                    'match_number': match_number,
                    'winner': username,
                    'timestamp': datetime.now().isoformat(),
                    'recorded_by': recorded_by
                }).execute()
            
            # Commit transaction
            supabase.rpc('commit_transaction').execute()
            logger.info(f"Updated points for {username}: {points_change}")
            
        except Exception as e:
            # Rollback transaction
            supabase.rpc('rollback_transaction').execute()
            raise e
            
    except Exception as e:
        logger.error(f"Error updating points: {str(e)}")
        raise DatabaseError(f"Failed to update points: {str(e)}")

def clear_points() -> None:
    """Clear all points and history"""
    try:
        # Start transaction
        supabase.rpc('begin_transaction').execute()
        
        try:
            # Delete all data
            supabase.table('points').delete().neq('username', '').execute()
            supabase.table('history').delete().neq('id', 0).execute()
            supabase.table('match_results').delete().neq('match_number', 0).execute()
            
            # Commit transaction
            supabase.rpc('commit_transaction').execute()
            logger.info("All points cleared successfully")
            
        except Exception as e:
            # Rollback transaction
            supabase.rpc('rollback_transaction').execute()
            raise e
            
    except Exception as e:
        logger.error(f"Error clearing points: {str(e)}")
        raise DatabaseError(f"Failed to clear points: {str(e)}")

def undo_last_point() -> Tuple[bool, str]:
    """Undo the last point change"""
    try:
        # Start transaction
        supabase.rpc('begin_transaction').execute()
        
        try:
            # Get the last history entry
            response = supabase.table('history').select('id, username, points_change, match_number').order('id', desc=True).limit(1).execute()
            
            if not response.data:
                return False, "No points to undo"
            
            last_entry = response.data[0]
            
            # Revert points
            supabase.table('points').update({
                'points': supabase.rpc('subtract_points', {
                    'username': last_entry['username'],
                    'points': last_entry['points_change']
                })
            }).eq('username', last_entry['username']).execute()
            
            # If this was a match win, remove it from match_results
            if last_entry['match_number'] is not None:
                supabase.table('match_results').delete().eq('match_number', last_entry['match_number']).execute()
            
            # Remove the history entry
            supabase.table('history').delete().eq('id', last_entry['id']).execute()
            
            # Commit transaction
            supabase.rpc('commit_transaction').execute()
            logger.info(f"Undid {last_entry['points_change']} point(s) for {last_entry['username']}")
            return True, f"Undid {last_entry['points_change']} point(s) for {last_entry['username']}"
            
        except Exception as e:
            # Rollback transaction
            supabase.rpc('rollback_transaction').execute()
            raise e
            
    except Exception as e:
        logger.error(f"Error undoing last point: {str(e)}")
        raise DatabaseError(f"Failed to undo last point: {str(e)}")

def get_match_results() -> List[Tuple[int, str, str]]:
    """Get all match results"""
    try:
        response = supabase.table('match_results').select('match_number, winner, timestamp').execute()
        return [(row['match_number'], row['winner'], row['timestamp']) for row in response.data]
    except Exception as e:
        logger.error(f"Error getting match results: {str(e)}")
        raise DatabaseError(f"Failed to get match results: {str(e)}") 